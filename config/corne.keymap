#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"                // keyposition helpers
#include "../zmk-nodefree-config/international_chars/french.dtsi"

/* layer and key shortcuts */

#define ___ &trans
#define XXX &none

ZMK_UNICODE_SINGLE(euro, N2, N0, A, C)  // €

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define MED 4
#define CAN 5

/ {
    behaviors {
        hml: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        shiftlock: shift_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_LOCK";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };
    };


    // conditional_layers {
    //     compatible = "zmk,conditional-layers";

    //     sym_num_to_med {
    //         if-layers = <SYM NUM>;
    //         then-layer = <CAN>;
    //     };
    // };

    macros {
        dapos: delayed_apos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_wait_time 5>
                , <&macro_tap &kp APOS>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp C_PP  &kp Q        &kp W        &kp F           &kp P         &kp B          &kp J      &kp L         &kp U          &kp Y        &dapos     &kp C_VOL_UP
&kp TAB   &hml LGUI A  &hml LALT R  &hml LSHFT S    &hml LCTRL T  &kp G          &kp M      &hmr LCTRL N  &hmr LSHFT E   &hmr LALT I  &hmr LGUI O  &kp C_VOL_DN
&kp BSPC  &kp Z        &kp X        &kp C           &kp D         &kp V          &kp K      &kp H         &kp COMMA      &kp DOT      &kp MINUS    &kp DEL
                                    &lt 3 LC(BSPC)  &shiftlock    &lt 1 SPACE    &lt 2 RET  &kp ESC       &lt 4 LC(DEL)
            >;
        };

        symbol_layer {
            bindings = <
&trans  &kp EXCL  &kp AT     &kp HASH   &kp DLLR  &kp PRCNT    &kp GRAVE  &kp AMPS   &kp STAR  &kp QMARK  &kp CARET  &trans
&euro   &kp PLUS  &kp EQUAL  &kp LPAR   &kp RPAR  &kp DQT      &kp COLON  &kp LBKT   &kp RBKT  &kp LBRC   &kp RBRC   &trans
&trans  &kp LT    &kp PIPE   &kp MINUS  &kp GT    &kp BSLH     &kp APOS   &kp UNDER  &kp FSLH  &kp TILDE  &kp SEMI   &trans
                             &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        numeric_layer {
            bindings = <
&none   &none   &kp F7  &kp F8  &kp F9  &kp F10    &kp FSLH   &kp N7  &kp N8  &kp N9  &kp STAR  &none 
&none   &none   &kp F4  &kp F5  &kp F6  &kp F11    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS  &none 
&none   &none   &kp F1  &kp F2  &kp F3  &kp F12    &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT   &none 
                        &none   &none   &none      &none      &none   &none 
            >;
        };

        navigation_layer {
            bindings = <
&none   &none      &none      &none      &none      &none      &mkp LCLK  &none     &kp PG_DN  &kp PG_UP  &none      &none
&none   &kp LGUI   &kp LALT   &kp LSHFT  &kp LCTRL  &kp TAB    &mkp MCLK  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none 
&none   &kp LC(Z)  &kp LC(X)  &kp LC(C)  &none      &kp LC(V)  &mkp RCLK  &none     &kp END    &kp HOME   &none      &none
                              &none      &none      &none      &none      &none     &none 
            >;
        };
        media_layer {
            bindings = <
&none  &none         &kp C_MUTE     &kp C_VOL_DN  &kp C_VOL_UP     &none         &none         &none         &none         &bt BT_PRV    &bt BT_NXT    &bt BT_CLR
&none  &none         &kp C_PREV     &kp C_AC_BACK &kp C_AC_FORWARD &kp C_NEXT    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none 
&none  &kp C_BRI_MIN &kp C_BRI_DN   &kp C_BRI_UP  &kp C_BRI_MAX    &none         &none         &none         &none         &none         &none         &none 
                                    &none         &none            &kp C_PP      &none         &none         &none 
            >;
        };
        canary_layer {
            bindings = <
&kp C_PP  &kp W        &kp L        &kp Y           &kp P         &kp B          &kp Z      &kp F         &kp O          &kp U        &kp APOS     &kp C_VOL_UP
&kp TAB   &hml LGUI C  &hml LALT R  &hml LSHFT S    &hml LCTRL T  &kp G          &kp M      &hmr LCTRL N  &hmr LSHFT E   &hmr LALT I  &hmr LGUI A  &kp C_VOL_DN
&kp BSPC  &kp Q        &kp J        &kp V           &kp D         &kp K          &kp X      &kp H         &kp COMMA      &kp DOT      &kp MINUS    &kp DEL
                                    &kp LC(BSPC)    &shiftlock    &kp SPACE      &kp RET    &kp ESC       &kp LC(DEL)
            >;
        };
/*        oxey_layout {
            bindings = <
' l c p f  q , o é à
r n s t d  h u e a i
x j g v b  . m - * y
            >;
        };
*/
    };  
};
