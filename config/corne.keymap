/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"                // keyposition helpers
#include "../zmk-nodefree-config/international_chars/french.dtsi"
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* layer and key shortcuts */

#define ___ &trans
#define XXX &none

ZMK_UNICODE_SINGLE(euro, N2, N0, A, C)  // â‚¬
/* Homerow behaviors */

#define QUICK_TAP_MS 175
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs
#define KEYS_AE  LM4 RM2
#define KEYS_OE  RM2 RM4
#define KEYS_A_G LM4 LM3
#define KEYS_A_C LM4 LM3 LM2
#define KEYS_C_C LB2 LB3 LB1
#define KEYS_E_G RM2 RM3
#define KEYS_E_A RM2 RM1
#define KEYS_E_C RM1 RM2 RM3
#define KEYS_E_D RM1 RM2 RM3 RM4
#define KEYS_I_C RM3 RT2
#define KEYS_I_D RM3 RB2
#define KEYS_O_C RM4 RT2
#define KEYS_U_G RT2 RT3
#define KEYS_U_C RT1 RT2 RT3
#define KEYS_U_D RT2 RM1

// layer shortcuts, must match order in which they are defined below

#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3
#define MED 4

/ {
    behaviors {
        hml: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        shiftlock: shift_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_LOCK";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ae {
            bindings = <&ae>;
            key-positions = <KEYS_AE>;
        };

        oe {
            bindings = <&oe>;
            key-positions = <KEYS_OE>;
        };

        a_g {
            bindings = <&a_g>;
            key-positions = <KEYS_A_G>;
        };

        a_c {
            bindings = <&a_c>;
            key-positions = <KEYS_A_C>;
        };

        c_c {
            bindings = <&c_c>;
            key-positions = <KEYS_C_C>;
        };

        e_g {
            bindings = <&e_g>;
            key-positions = <KEYS_E_G>;
        };

        e_a {
            bindings = <&e_a>;
            key-positions = <KEYS_E_A>;
        };

        e_c {
            bindings = <&e_c>;
            key-positions = <KEYS_E_C>;
        };

        e_d {
            bindings = <&e_d>;
            key-positions = <KEYS_E_D>;
        };

        i_c {
            bindings = <&i_c>;
            key-positions = <KEYS_I_C>;
        };

        i_d {
            bindings = <&i_d>;
            key-positions = <KEYS_I_D>;
        };

        o_c {
            bindings = <&o_c>;
            key-positions = <KEYS_O_C>;
        };

        u_g {
            bindings = <&u_g>;
            key-positions = <KEYS_U_G>;
        };

        u_c {
            bindings = <&u_c>;
            key-positions = <KEYS_U_C>;
        };

        u_d {
            bindings = <&u_d>;
            key-positions = <KEYS_U_D>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sym_num_to_med {
            if-layers = <SYM NUM>;
            then-layer = <MED>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp C_PP  &kp Q        &kp W        &kp F           &kp P         &kp B          &kp J      &kp L         &kp U          &kp Y        &kp APOS     &kp C_VOL_UP
&kp TAB   &hml LGUI A  &hml LALT R  &hml LSHFT S    &hml LCTRL T  &kp G          &kp M      &hmr RCTRL N  &hmr RSHFT E   &hmr RALT I  &hmr RGUI O  &kp C_VOL_DN
&kp BSPC  &kp Z        &kp X        &kp C           &kp D         &kp V          &kp K      &kp H         &kp COMMA      &kp DOT      &kp MINUS    &kp DEL
                                    &lt 4 LC(BSPC)  &kp ESC       &lt 1 SPACE    &lt 2 RET  &shiftlock    &lt 3 LC(DEL)
            >;
        };

        symbol_layer {
            bindings = <
&trans  &kp EXCL  &kp AT     &kp HASH   &kp DLLR  &kp PRCNT    &kp GRAVE  &kp AMPS   &kp STAR  &kp QMARK  &kp CARET  &trans
&euro   &kp PLUS  &kp EQUAL  &kp LPAR   &kp RPAR  &kp DQT      &kp COLON  &kp LBKT   &kp RBKT  &kp LBRC   &kp RBRC   &trans
&trans  &kp LT    &kp PIPE   &kp MINUS  &kp GT    &kp BSLH     &kp APOS   &kp UNDER  &kp FSLH  &kp TILDE  &kp SEMI   &trans
                             &trans     &trans    &trans       &trans     &trans     &trans
            >;
        };

        numeric_layer {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &kp FSLH   &kp N7  &kp N8  &kp N9  &kp STAR  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &kp N0     &kp N1  &kp N2  &kp N3  &kp DOT   &trans
                        &trans  &trans  &trans     &trans     &trans  &trans
            >;
        };

        navigation_layer {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans     &trans  &trans    &kp PG_DN  &kp PG_UP  &trans     &none
&trans  &kp LGUI   &kp LALT   &kp LSHFT  &kp LCTRL  &kp TAB    &trans  &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans     &trans  &trans    &kp END    &kp HOME   &trans     &none
                              &trans     &trans     &trans     &trans  &trans    &trans
            >;
        };

        media_layer {
            bindings = <
&kp C_VOL_UP  &trans  &trans      &trans         &trans            &trans        &trans        &trans        &trans        &bt BT_PRV    &bt BT_NXT    &bt BT_CLR
&kp C_VOL_DN  &trans  &kp C_PREV  &kp C_AC_BACK  &kp C_AC_FORWARD  &kp C_NEXT    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&kp C_MUTE    &trans  &trans      &trans         &trans            &trans        &trans        &trans        &trans        &trans        &trans        &trans
                                  &trans         &trans            &kp C_PP      &trans        &trans        &trans
            >;
        };
    };
};
